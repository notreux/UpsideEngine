local data = require(script.Parent.Parent.Parent.AppData.Data)
local baseClass = require(script.Parent.BaseClass)

return function()
	describe("constructor .new()", function()
		it("should create a new object", function()
			local object = baseClass.new()
			expect(data.objects[object.Id]).to.be.ok()
		end)
	end)

	describe(":SetName()", function()
		it("should rename the object", function()
			local object = baseClass.new()
			object:SetName("NewName")
			expect(object.Name).to.equal("NewName")
		end)
	end)

	describe(":Destroy()", function()
		it("Destroys the object", function()
			local object = baseClass.new()
			object:Destroy()
			expect(data.objects[object.Id]).to.never.be.ok()
		end)
	end)

	describe(":Clone()", function()
		it("should clone the object", function()
			local object = baseClass.new()
			local clone = object:Clone()
			expect(clone.Id).to.never.equal(object.Id)
			expect(clone.Name).to.equal(object.Name)
		end)
	end)

	describe(":IsA()", function()
		it("should return true for matching class name", function()
			local object = baseClass.new()
			expect(object:IsA("BaseClass")).to.be.ok()
		end)

		it("should return false for non-matching class name", function()
			local object = baseClass.new()
			print(object:IsA("NonExistentClass"))
			expect(object:IsA("NonExistentClass")).to.equal(false)
		end)
	end)

	describe(":SetClassName()", function()
		it("should set the class name", function()
			local object = baseClass.new()
			object:SetClassName("NewClassName")
			expect(object.ClassName).to.equal("NewClassName")
		end)
	end)
end
