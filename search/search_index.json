{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Upside Engine   Upside Engine is the ultimate 2d framework to make your own 2d games!  <p>Get Started Documentation</p> <p> </p> Upside Engine helps you creating immersive 2D lighting effects. With Upside Engine, you can easily create lighting environments for your roblox videogames. <p> </p> Upside Engine Let's you create immersive 2D particles for your games. Whether you need fire, smoke, sparks, or magic effects, Upside Engine has you covered. <p> </p> Upside Engine, gives you the freedom and flexibility to make your 2D games as fun and immersive, add physics to your character and bring it to life."},{"location":"games.html","title":"Games","text":""},{"location":"games.html#games","title":"Games","text":"<p>Here you can explore a list of  games created with the <code>Upside Engine Framework</code>, if you would like to add your game here send us a request in our discord . Before send us a request about your game make sure your game is public, otherwise it will be rejected.</p>"},{"location":"documentation/BaseClass.html","title":"BaseClass","text":"<p>All objects are based on this class</p> <p></p>"},{"location":"documentation/BaseClass.html#properties","title":"Properties","text":""},{"location":"documentation/BaseClass.html#readonly-string-classname","title":"readonly string ClassName","text":"<p>The name of the class</p>"},{"location":"documentation/BaseClass.html#readonly-string-name","title":"readonly string Name","text":"<p>The name of the object</p>"},{"location":"documentation/BaseClass.html#string-id","title":"string Id","text":"<p>A unique identifier for each object</p>"},{"location":"documentation/BaseClass.html#methods","title":"Methods","text":""},{"location":"documentation/BaseClass.html#baseclass-new","title":"BaseClass <code>new()</code>","text":"<p>Creates a new object</p> Example <pre><code>BaseClass.new()\n</code></pre>"},{"location":"documentation/BaseClass.html#boolean-isaclassname-string","title":"boolean <code>IsA(className: string)</code>","text":"<p>IsA returns true if the Instance's class is equivalent to or a subclass of a given class name</p>"},{"location":"documentation/BaseClass.html#void-setnamename-string","title":"void <code>SetName(name: string)</code>","text":"<p>Sets the object name</p>"},{"location":"documentation/BaseClass.html#void-destroy","title":"void <code>Destroy()</code>","text":"<p>Destroys the object</p>"},{"location":"documentation/BaseClass.html#events","title":"Events","text":""},{"location":"documentation/BaseClass.html#destroy","title":"Destroy","text":"Parameters DataType Property String"},{"location":"documentation/UpsideEngine.html","title":"Upside Engine","text":"<p>On this page you will find information about the object that is returned when you access the engine. In this object you have access to all classes and services of the engine</p> <p>Info</p> <p>This object was extended from EventEmitter</p> <p></p>"},{"location":"documentation/UpsideEngine.html#properties","title":"Properties","text":""},{"location":"documentation/UpsideEngine.html#string-version","title":"string Version","text":"<p>The current installed upside engine version</p>"},{"location":"documentation/UpsideEngine.html#methods","title":"Methods","text":""},{"location":"documentation/UpsideEngine.html#void-newclassname-string","title":"void <code>new(ClassName: string)</code>","text":"<p>This method creates any of these classes:</p> <ul> <li>Scene</li> <li>Environment</li> <li>Character</li> <li>Sprite</li> <li>Particle</li> <li>Shader</li> <li>StaticObject</li> <li>PhysicalObject</li> <li>Sound</li> <li>Light</li> </ul>"},{"location":"documentation/UpsideEngine.html#void-getserviceservicename-string","title":"void <code>GetService(ServiceName: string)</code>","text":"<p>This method returns any of these services:</p> <ul> <li>SceneManager</li> <li>NetworkingService</li> <li>CrossPlatformService</li> <li>PluginSupportService</li> </ul>"},{"location":"documentation/Welcome.html","title":"Welcome to the documentation!","text":"<p>Cite</p> <p>If a class was inherited from another class, the properties of the class from which it was inherited will not show its properties on the current page, you will have to go to its respective page to read more about its information. </p> <p>Here are a few pages that are essential to read if this is your first time using the upside engine framework:</p> <ul> <li>Upside Engine</li> <li>SceneManager</li> <li>CrossPlatformService</li> <li>Scene</li> <li>Sprite</li> </ul>"},{"location":"documentation/autogen/BaseObject.html","title":"BaseObject","text":""},{"location":"documentation/autogen/BaseObject.html#extended-from-eventemitter-baseobject","title":"Extended from EventEmitter BaseObject","text":"<p>This class is the base class of the majority of classes</p>"},{"location":"documentation/autogen/BaseObject.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/BaseObject.html#instance-instance","title":"Instance Instance","text":"<p>The object instance</p>"},{"location":"documentation/autogen/BaseObject.html#string-scene","title":"string Scene","text":"<p>The object scene ID</p>"},{"location":"documentation/autogen/BaseObject.html#table-tags","title":"table Tags","text":"<p>This table stores all the tags of the object</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/BaseObject.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/BaseObject.html#void-setscenescene-scene","title":"void SetScene(<code>scene: Scene</code>)","text":"<p>Sets the object scene</p>"},{"location":"documentation/autogen/BaseObject.html#void-addtagtag-string","title":"void AddTag(<code>tag: string</code>)","text":"<p>Adds a tag to the object</p>"},{"location":"documentation/autogen/BaseObject.html#boolean-hastagtag-string","title":"boolean HasTag(<code>tag: string</code>)","text":"<p>Checks if the object contain the specified tag</p>"},{"location":"documentation/autogen/BaseObject.html#void-removetagtag-string","title":"void RemoveTag(<code>tag: string</code>)","text":"<p>Removes a tag from the object</p>"},{"location":"documentation/autogen/BaseObject.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Camera.html","title":"Camera","text":""},{"location":"documentation/autogen/Camera.html#extended-from-eventemitter-camera","title":"Extended from EventEmitter Camera","text":"<p>This class is included on every scene, it's used to move you around the scene</p>"},{"location":"documentation/autogen/Camera.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Camera.html#udim2-offsetposition","title":"UDim2 OffsetPosition","text":"<p>This property serves to move as many pixels as you want the camera to adjust it to a desired position</p>"},{"location":"documentation/autogen/Camera.html#vector2-localposition","title":"Vector2 LocalPosition","text":"<p>This property is used to move the camera internally</p>"},{"location":"documentation/autogen/Camera.html#vector2-limits","title":"Vector2 Limits","text":"<p>This property marks the limits to move the camera, for example, if you set <code>Vector2.new(0.5, 0.5)</code> the camera will move only when it reaches the limit</p>"},{"location":"documentation/autogen/Camera.html#boolean-followsubject","title":"boolean FollowSubject","text":"<p>This property defines if the camera is going to follow the defined subject</p>"},{"location":"documentation/autogen/Camera.html#string-scene","title":"string Scene","text":"<p>This is the Scene Id of the camera</p>"},{"location":"documentation/autogen/Camera.html#number-smoothness","title":"number Smoothness","text":"<p>This property defines the smoothness with which the camera will move, it only works in a range between 0 and 1</p>"},{"location":"documentation/autogen/Camera.html#character-subject","title":"Character Subject","text":"<p>This property defines the object which is going to follow the camera</p>"},{"location":"documentation/autogen/Camera.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Camera.html#udim2-getposition","title":"UDim2 GetPosition()","text":"<p>Gets the camera position</p>"},{"location":"documentation/autogen/Camera.html#void-setpositionudim2-udim2","title":"void SetPosition(<code>udim2: UDim2</code>)","text":"<p>Sets the camera position</p>"},{"location":"documentation/autogen/Camera.html#void-setsubjectsubject-character","title":"void SetSubject(<code>subject: Character</code>)","text":"<p>Sets the camera subject</p>"},{"location":"documentation/autogen/Camera.html#void-looktoobject-physicalobject","title":"void LookTo(<code>object: PhysicalObject</code>)","text":"<p>Position the camera in a centered location relative to the provided object</p>"},{"location":"documentation/autogen/Camera.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Character.html","title":"Character","text":""},{"location":"documentation/autogen/Character.html#extended-from-sprite-character","title":"Extended from Sprite Character","text":"<p>This class is used for the player character and for npcs</p>"},{"location":"documentation/autogen/Character.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Character.html#number-health","title":"number Health","text":"<p>The amount of health of the character</p>"},{"location":"documentation/autogen/Character.html#number-maxhealth","title":"number MaxHealth","text":"<p>The maximum amount of health of the character </p>"},{"location":"documentation/autogen/Character.html#number-walkspeed","title":"number WalkSpeed","text":"<p>The walk speed of the character</p>"},{"location":"documentation/autogen/Character.html#number-jumppower","title":"number JumpPower","text":"<p>The jump power of the character</p>"},{"location":"documentation/autogen/Character.html#boolean-isjumping","title":"boolean IsJumping","text":"<p>Set to true when the character is jumping</p>"},{"location":"documentation/autogen/Character.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Character.html#void-updatehealthhealth-number","title":"void UpdateHealth(<code>Health: number</code>)","text":"<p>Updates the amount of health of the character </p>"},{"location":"documentation/autogen/Character.html#void-jumpjumppower-number","title":"void Jump(<code>jumpPower: number?</code>)","text":"<p>The character jumps with the provided jump power, if none is provided it will use the JumpPower property as value </p>"},{"location":"documentation/autogen/Character.html#void-movetotarget-vector2","title":"void MoveTo(<code>target: Vector2</code>)","text":"<p>The character walks directly to the provided position</p>"},{"location":"documentation/autogen/Character.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Connection.html","title":"Connection","text":""},{"location":"documentation/autogen/Connection.html#extended-from-baseclass-connection","title":"Extended from BaseClass Connection","text":"<p>This class is used in the event emitter class, its used to manage a listener</p>"},{"location":"documentation/autogen/Connection.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Connection.html#boolean-active","title":"boolean Active","text":"<p>Defines if the connection is active or not</p>"},{"location":"documentation/autogen/Connection.html#number-eventid","title":"number EventId","text":"<p>The id of the linked event</p>"},{"location":"documentation/autogen/Connection.html#table-event","title":"table Event","text":"<pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/Connection.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Connection.html#thread-waitseconds-number","title":"thread? Wait(<code>seconds: number?</code>)","text":"<p>Wait until the event gets fired, if seconds were specified, once the specified seconds have elapsed, it will stop waiting</p>"},{"location":"documentation/autogen/Connection.html#void-disconnect","title":"void Disconnect()","text":"<p>Deletes the connection and the listener</p>"},{"location":"documentation/autogen/Connection.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/CrossPlatformService.html","title":"CrossPlatformService","text":""},{"location":"documentation/autogen/CrossPlatformService.html#extended-from-eventemitter-crossplatformservice","title":"Extended from EventEmitter CrossPlatformService","text":"<p>This class is used to make the controls functional in any device (Keyboards, Mobiles, Gamepads), this service vinculate actions   to specified keys, and also provides a movement system for the player character which can be disabled with the <code>DefaultControllersEnabled</code>  property, here is an example to make our player jumps in every device: <pre><code>--                                  Device,     Key,    Action\nCrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Up\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Up\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Up\")\n</code></pre></p> <p>But this is not limited only to movement actions, you can also assign other kind of actions, for example:</p> <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"E\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Collect\")\n</code></pre> <p>We assigned an action for our devices but how can we detect when an action is triggered? well we can listen to three events \"InputBegin\", \"InputChange\", \"InputEnd\", example of use:</p> <pre><code>-- If the movement belongs to a stick, the second parameter will give the current position of the stick\nCrossPlatformService:On(\"InputBegin\", function(inputObject)\n    local character = CrossPlatformService.Character\n\n    if inputObject.Action == \"Up\" then\n        character:Jump(150)\n    end\nend)\n</code></pre>"},{"location":"documentation/autogen/CrossPlatformService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/CrossPlatformService.html#boolean-defaultcontrollersenabled","title":"boolean DefaultControllersEnabled","text":"<p>Defines if the default movement system is enabled</p>"},{"location":"documentation/autogen/CrossPlatformService.html#boolean-sideview","title":"boolean SideView","text":"<p>Defines if the character is going to be seen from the side or from the top</p>"},{"location":"documentation/autogen/CrossPlatformService.html#number-sticksensibility","title":"number StickSensibility","text":"<p>This is the sensibility of the sticks in mobile and in game controllers</p>"},{"location":"documentation/autogen/CrossPlatformService.html#character-character","title":"Character Character","text":"<p>This is the character which is going to be tracked by the camera</p>"},{"location":"documentation/autogen/CrossPlatformService.html#table-configs","title":"table Configs","text":"<p>This table stores the default controllers</p> <pre><code>{\n    Keyboard: {\n        W: string,\n        A: string,\n        S: string,\n        D: string,\n        Up: string,\n        Left: string,\n        Down: string,\n        Right: string,\n        Space: string,\n    },\n    Gamepad: {\n        ButtonA: string,\n        Thumbstick1: {\n            Up: string,\n            Left: string,\n            Down: string,\n            Right: string,\n        },\n    },\n    Mobile: {\n        JumpButton: string,\n        Thumbstick1: {\n            Up: string,\n            Left: string,\n            Down: string,\n            Right: string,\n        },\n    },\n}\n</code></pre>"},{"location":"documentation/autogen/CrossPlatformService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/CrossPlatformService.html#void-setdevicekeydevice-string-key-string-action-string","title":"void SetDeviceKey(<code>device: string, key: string, action: string</code>)","text":"<p>Assigns an action to a device key, example:     <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Up\")\n</code></pre></p>"},{"location":"documentation/autogen/CrossPlatformService.html#void-setdeviceconfigdevice-string-controls-dictionarystring-string","title":"void SetDeviceConfig(<code>device: string, controls: Dictionary&lt;string, string&gt;</code>)","text":"<p>Sets the entire configuration of a device, example:     <pre><code>CrossPlatformService:SetDeviceConfig(\"Keyboard\", {\n    W = \"Up\",\n    A = \"Left\",\n    S = \"Down\",\n    D = \"Right\",\n\n    Up = \"Up\",\n    Left = \"Left\",\n    Down = \"Down\",\n    Right = \"Right\",\n    Space = \"Up\",\n})\n</code></pre></p>"},{"location":"documentation/autogen/CrossPlatformService.html#void-setplayercharactercharacter-character","title":"void SetPlayerCharacter(<code>character: Character</code>)","text":"<p>Sets the player character</p>"},{"location":"documentation/autogen/CrossPlatformService.html#events","title":"Events","text":"Name Description InputBegin Params -&gt; UpsideEngineInput   Fired when one of the keys/sticks in the configuration is pressed/moved InputChange Params -&gt; UpsideEngineInput   Fired when the an active input change its value, for example the position of a stick InputEnd Params -&gt; UpsideEngineInput   Fired when one of the keys/sticks in the configuration finish to be pressed/moved"},{"location":"documentation/autogen/Environment.html","title":"Environment","text":""},{"location":"documentation/autogen/Environment.html#extended-from-baseobject-environment","title":"Extended from BaseObject Environment","text":"<p>This class is used to storage objects and interact with them in an easier way</p>"},{"location":"documentation/autogen/Environment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Environment.html#table-content","title":"table Content","text":"<pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/Environment.html#number-count","title":"number Count","text":"<p>The amount of objects in this environment</p>"},{"location":"documentation/autogen/Environment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Environment.html#any-getindex-string","title":"any Get(<code>index: string</code>)","text":"<p>Gets the object with the specified index</p>"},{"location":"documentation/autogen/Environment.html#void-setonevalue-any-index-string","title":"void SetOne(<code>value: any, index: string</code>)","text":"<p>Adds an object with the specified index, if no parameter is specified it will use the next number of the count property as index</p>"},{"location":"documentation/autogen/Environment.html#void-addonevalue-any-index-string","title":"void AddOne(<code>value: any, index: string</code>)","text":"<p>Adds an object with the specified index, if no parameter is specified it will use the next number of the count property as index</p>"},{"location":"documentation/autogen/Environment.html#void-removeoneindex-string","title":"void RemoveOne(<code>index: string</code>)","text":"<p>Removes the object with the specified index</p>"},{"location":"documentation/autogen/Environment.html#boolean-hasoneindex-string","title":"boolean HasOne(<code>index: string</code>)","text":"<p>Checks if the environment has a value with the specified index</p>"},{"location":"documentation/autogen/Environment.html#boolean-dictionary-hasobjects-arraystring","title":"(boolean, Dictionary) Has(<code>objects: Array&lt;string&gt;</code>) <p>Checks if the environment contains every specified index and returns a boolean and a dictionary with boolean values, example:     <pre><code>local hasAll, dictionary = treeEnv:Has({\n    \"Tree1\",\n    \"Tree2\",\n    \"Tree4\"\n})\n\nprint(hasAll, dictionary) -- output: false, { Tree1 = true, Tree2 = true, Tree4 = false }\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-addobjects-dictionarystring-any","title":"void Add(<code>objects: Dictionary&lt;string, any&gt;</code>) <p>Adds objects with the specified index     <pre><code>treeEnv:Add({\n    \"Tree1\" = tree.new(),\n    \"Tree2\" = tree.new(),\n    \"Tree3\" = tree.new()\n})\n\nprint(treeEnv:Get(\"Tree2\")) -- output: Tree2\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-removeobjects-arraystring","title":"void Remove(<code>objects: Array&lt;string&gt;</code>) <p>Removes the objects with the specified index, example:     <pre><code>treeEnv:Remove({ \"Tree1\", \"Tree2\", \"Tree3\" })\nprint(treeEnv:Get(\"Tree2\")) -- output: nil\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-updateobjects-dictionarystring-any","title":"void Update(<code>objects: Dictionary&lt;string, any&gt;</code>) <p>Updates the objects with the specified index, example:     <pre><code>treeEnv:Update({\n    Tree1 = treeEnv:Get(\"Tree2\"),\n    Tree2 = treeEnv:Get(\"Tree1\"),\n})\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#any-findbynamename-string","title":"any FindByName(<code>name: string</code>) <p>Finds an object by his name</p>","text":""},{"location":"documentation/autogen/Environment.html#void-setpropertyproperty-string-value-any","title":"void SetProperty(<code>property: string, value: any</code>) <p>Sets the specified property in every object in the environment</p>","text":""},{"location":"documentation/autogen/Environment.html#void-runmethod-string-any","title":"void Run(<code>method: string, ...any</code>) <p>Executes the specified methods in every object in the environment with the specified parameters</p>","text":""},{"location":"documentation/autogen/Environment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/EventEmitter.html","title":"EventEmitter","text":""},{"location":"documentation/autogen/EventEmitter.html#extended-from-baseclass-eventemitter","title":"Extended from BaseClass EventEmitter","text":"<p>The event emitter is used to manage the events of a class</p>"},{"location":"documentation/autogen/EventEmitter.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/EventEmitter.html#table-eventsstorage","title":"table EventsStorage","text":"<p>This table store all the events of the class</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/EventEmitter.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/EventEmitter.html#connection-onname-string-callback-any","title":"Connection On(<code>name: string, callback: () -&gt; any</code>)","text":""},{"location":"documentation/autogen/EventEmitter.html#void-firename-string-any","title":"void Fire(<code>name: string, ...any</code>)","text":"<p>Triggers an event with the specified arguments</p>"},{"location":"documentation/autogen/EventEmitter.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Fluid.html","title":"Fluid","text":""},{"location":"documentation/autogen/Fluid.html#extended-from-physicalobject-fluid","title":"Extended from PhysicalObject Fluid","text":"<p>This class is used to simulate fluids</p>"},{"location":"documentation/autogen/Fluid.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Fluid.html#number-density","title":"number Density","text":"<p>Indicates how much dense the fluid should be. Higher values indicate a denser fluid,          affecting buoyancy and movement of objects within the fluid</p>"},{"location":"documentation/autogen/Fluid.html#number-viscosity","title":"number Viscosity","text":"<p>Determines the flow resistance of the fluid. Higher values indicate a thicker fluid,          affecting the speed at which objects can move through it</p>"},{"location":"documentation/autogen/Fluid.html#number-wavesamplitude","title":"number WavesAmplitude","text":"<p>Specifies the magnitude of the fluid waves. These waves are not visible but influence buoyancy and object stability.</p>"},{"location":"documentation/autogen/Fluid.html#number-wavesspeed","title":"number WavesSpeed","text":"<p>Determines how fast the waves should move</p>"},{"location":"documentation/autogen/Fluid.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/Fluid.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Light.html","title":"Light","text":""},{"location":"documentation/autogen/Light.html#extended-from-staticobject-light","title":"Extended from StaticObject Light","text":"<p>This class is used to illuminate areas in the darkness</p>"},{"location":"documentation/autogen/Light.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Light.html#string-shape","title":"string Shape","text":"<p>Is how the light should be shown, there are two modes \"PointLight\" and \"SpotLight\"</p>"},{"location":"documentation/autogen/Light.html#number-rotation","title":"number Rotation","text":""},{"location":"documentation/autogen/Light.html#number-angle","title":"number Angle","text":""},{"location":"documentation/autogen/Light.html#color3-color","title":"Color3 Color","text":"<p>The color you want the light to have</p>"},{"location":"documentation/autogen/Light.html#number-range","title":"number Range","text":"<p>Is the range of the light</p>"},{"location":"documentation/autogen/Light.html#number-brightness","title":"number Brightness","text":"<p>Is the brightness of the light</p>"},{"location":"documentation/autogen/Light.html#number-transparency","title":"number Transparency","text":"<p>Is the transparency of the light</p>"},{"location":"documentation/autogen/Light.html#boolean-inverted","title":"boolean Inverted","text":"<p>Warning</p> <p>Only works on Pointlights</p> <p>Inverts the light source</p>"},{"location":"documentation/autogen/Light.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/Light.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/LightingEnvironment.html","title":"LightingEnvironment","text":""},{"location":"documentation/autogen/LightingEnvironment.html#extended-from-environment-lightingenvironment","title":"Extended from Environment LightingEnvironment","text":"<p>This class is one of the most important components of a scene, is used to manage everything related with the light </p>"},{"location":"documentation/autogen/LightingEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/LightingEnvironment.html#color3-ambientcolor","title":"Color3 AmbientColor","text":"<p>This is the color of every pixel of the ambient, we can say is the darkness color</p>"},{"location":"documentation/autogen/LightingEnvironment.html#number-ambienttransparency","title":"number AmbientTransparency","text":"<p>This is the transparency of the ambient, we can say is the darkness transparency</p>"},{"location":"documentation/autogen/LightingEnvironment.html#number-updatefrequency","title":"number UpdateFrequency","text":"<p>This is the seconds between every update of the pixels in the screen</p>"},{"location":"documentation/autogen/LightingEnvironment.html#number-lightintensity","title":"number LightIntensity","text":"<p>This is the intensity for all the lights in the scene</p>"},{"location":"documentation/autogen/LightingEnvironment.html#enum-lightstyle","title":"Enum LightStyle","text":"<p>Determines the light rendering mode, there are two modes Enum.ResamplerMode.Pixelated and Enum.ResamplerMode.Default</p>"},{"location":"documentation/autogen/LightingEnvironment.html#vector2-chunkresolution","title":"Vector2 ChunkResolution","text":"<p>Determines the resolution for every chunk of the screen</p>"},{"location":"documentation/autogen/LightingEnvironment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/LightingEnvironment.html#void-drawpixels","title":"void DrawPixels()","text":"<p>Draws the pixels for the scene with the specified resolution</p>"},{"location":"documentation/autogen/LightingEnvironment.html#void-updatescreen","title":"void UpdateScreen()","text":"<p>Updates the position, the transparency and the color of the ambient</p>"},{"location":"documentation/autogen/LightingEnvironment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/NetworkingService.html","title":"NetworkingService","text":""},{"location":"documentation/autogen/NetworkingService.html#extended-from-eventemitter-networkingservice","title":"Extended from EventEmitter NetworkingService","text":"<p>This class is used to replicate objects to other clients, for example the player character</p>"},{"location":"documentation/autogen/NetworkingService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/NetworkingService.html#boolean-destroyobjectsonleave","title":"boolean DestroyObjectsOnLeave","text":"<p>Defines if the replicated objects by other clients should be destroyed when they leaves</p>"},{"location":"documentation/autogen/NetworkingService.html#table-replicationtarget","title":"table ReplicationTarget","text":"<pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/NetworkingService.html#table-playersdata","title":"table PlayersData","text":"<pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/NetworkingService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/NetworkingService.html#void-replicateobject-baseobject","title":"void Replicate(<code>object: BaseObject</code>)","text":"<p>Replicates an object to other clients</p>"},{"location":"documentation/autogen/NetworkingService.html#rbxscriptconnection-replicateonchangeobject-baseobject","title":"RBXScriptConnection ReplicateOnChange(<code>object: BaseObject</code>)","text":"<p>Replicates an object and each change on it, and returns the connections that detect each change of the object</p>"},{"location":"documentation/autogen/NetworkingService.html#events","title":"Events","text":"Name Description ReplicationRequest Params -&gt; Request   Fired when a request is received by the client"},{"location":"documentation/autogen/ObjectEnvironment.html","title":"ObjectEnvironment","text":""},{"location":"documentation/autogen/ObjectEnvironment.html#extended-from-environment-objectenvironment","title":"Extended from Environment ObjectEnvironment","text":""},{"location":"documentation/autogen/ObjectEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/ObjectEnvironment.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/ObjectEnvironment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Parallax.html","title":"Parallax","text":""},{"location":"documentation/autogen/Parallax.html#extended-from-baseobject-parallax","title":"Extended from BaseObject Parallax","text":"<p>This class is used to create inmersive backgrounds</p>"},{"location":"documentation/autogen/Parallax.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Parallax.html#vector2-canvassize","title":"Vector2 CanvasSize","text":"<p>Defines the image zoom, if the value is 1X, 1Y it will see the whole image as expected, if you set it to 2X, 2Y you only will be able see half of the image</p>"},{"location":"documentation/autogen/Parallax.html#vector2-offset","title":"Vector2 Offset","text":"<p>Defines the scroll position of the parallax object</p>"},{"location":"documentation/autogen/Parallax.html#boolean-track","title":"boolean Track","text":"<p>Defines if Update method should be called automatically</p>"},{"location":"documentation/autogen/Parallax.html#boolean-locktocamera","title":"boolean LockToCamera","text":"<p>Locks the Parallax object to the camera position</p>"},{"location":"documentation/autogen/Parallax.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Parallax.html#void-settexturetexture-string","title":"void SetTexture(<code>texture: string</code>)","text":"<p>Sets the tile texture</p>"},{"location":"documentation/autogen/Parallax.html#void-updatetiles","title":"void UpdateTiles()","text":"<p>Updates the parallax properties (position, canvasSize, etc.), its automatically called when Track is enabled</p>"},{"location":"documentation/autogen/Parallax.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Particle.html","title":"Particle","text":""},{"location":"documentation/autogen/Particle.html#extended-from-baseobject-particle","title":"Extended from BaseObject Particle","text":"<p>Warning</p> <p>Currently it's recommended to use sprites to make particles/vfx, this class is in experimental state and can change a lot</p> <p>This class is used for vfx</p>"},{"location":"documentation/autogen/Particle.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Particle.html#vector2-angle","title":"Vector2 Angle","text":"<p>Depending on the value the particles will be more dispersed</p>"},{"location":"documentation/autogen/Particle.html#tweeninfo-info","title":"TweenInfo Info","text":"<p>Is the tween info of the tween which is going to be used to move the particles</p>"},{"location":"documentation/autogen/Particle.html#boolean-tracklight","title":"boolean TrackLight","text":"<p>Warning</p> <p>Experimental, dont use</p>"},{"location":"documentation/autogen/Particle.html#boolean-cancollide","title":"boolean CanCollide","text":"<p>Warning</p> <p>Experimental, dont use</p>"},{"location":"documentation/autogen/Particle.html#boolean-enabled","title":"boolean Enabled","text":"<p>When its enabled new particles can be emitted</p>"},{"location":"documentation/autogen/Particle.html#number-maxrate","title":"number MaxRate","text":"<p>Is the maximum amount of particles that can exist at the same time</p>"},{"location":"documentation/autogen/Particle.html#number-units","title":"number Units","text":"<p>Is the amount of particles that are existing at this moment</p>"},{"location":"documentation/autogen/Particle.html#number-lightbrightness","title":"number LightBrightness","text":"<p>Warning</p> <p>Experimental, dont use</p>"},{"location":"documentation/autogen/Particle.html#number-lightrange","title":"number LightRange","text":"<p>Warning</p> <p>Experimental, dont use</p>"},{"location":"documentation/autogen/Particle.html#number-range","title":"number Range","text":"<p>Is the distance that can be traveled by each particle </p>"},{"location":"documentation/autogen/Particle.html#number-lifetime","title":"number LifeTime","text":"<p>The number of seconds the particle will be active before being destroyed</p>"},{"location":"documentation/autogen/Particle.html#number-clock","title":"number Clock","text":"<p>Used for internal purposes</p>"},{"location":"documentation/autogen/Particle.html#number-rate","title":"number Rate","text":"<p>Is the amount of particles which is going to be generated</p>"},{"location":"documentation/autogen/Particle.html#character-subject","title":"Character Subject","text":"<p>The subject which is going to be the center of emission of the particle, a character, sprite, etc...</p>"},{"location":"documentation/autogen/Particle.html#table-properties","title":"table Properties","text":"<p>Is a table with the initial properties of the particle which is going to be generated</p> <pre><code>{\n    Image: string,\n}\n</code></pre>"},{"location":"documentation/autogen/Particle.html#table-goals","title":"table Goals","text":"<p>Is a table with the goals of the particles</p> <pre><code>{\n    Size: UDim2,\n    ImageTransparency: number,\n}\n</code></pre>"},{"location":"documentation/autogen/Particle.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Particle.html#void-setsubjectsubject-character","title":"void SetSubject(<code>subject: Character</code>)","text":"<p>Sets the subject property</p>"},{"location":"documentation/autogen/Particle.html#void-setangleangle-vector2","title":"void SetAngle(<code>Angle: Vector2</code>)","text":"<p>Sets the angle property of the particle</p>"},{"location":"documentation/autogen/Particle.html#void-setmaxratemaxrate-number","title":"void SetMaxRate(<code>maxRate: number</code>)","text":"<p>Sets the maximum amount of particles that can exist at the same time</p>"},{"location":"documentation/autogen/Particle.html#void-emitrate-number","title":"void Emit(<code>rate: number</code>)","text":"<p>Emits the specified amount of particles, if none is provided then will use as amount the Rate property</p>"},{"location":"documentation/autogen/Particle.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/ParticleEnvironment.html","title":"ParticleEnvironment","text":""},{"location":"documentation/autogen/ParticleEnvironment.html#extended-from-environment-particleenvironment","title":"Extended from Environment ParticleEnvironment","text":""},{"location":"documentation/autogen/ParticleEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/ParticleEnvironment.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/ParticleEnvironment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/PhysicalObject.html","title":"PhysicalObject","text":""},{"location":"documentation/autogen/PhysicalObject.html#extended-from-staticobject-physicalobject","title":"Extended from StaticObject PhysicalObject","text":"<p>This class is used to create objects with physics</p>"},{"location":"documentation/autogen/PhysicalObject.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/PhysicalObject.html#vector2-force","title":"Vector2 Force","text":"<p>Is the force which is applied in the moment to the object</p>"},{"location":"documentation/autogen/PhysicalObject.html#vector2-velocity","title":"Vector2 Velocity","text":"<p>Is the velocity applied to the object</p>"},{"location":"documentation/autogen/PhysicalObject.html#vector2-acceleration","title":"Vector2 Acceleration","text":"<p>Defines the rate of change of velocity for the physical object, initially set to zero.</p>"},{"location":"documentation/autogen/PhysicalObject.html#table-collisions","title":"table Collisions","text":"<p>This table stores all the active collisions</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#table-collisionblacklist","title":"table CollisionBlacklist","text":"<p>This dictionary stores all the blacklisted objects, to blacklist an object do it like this:   <pre><code>CollisionBlacklist[object.Id] = true\n</code></pre></p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#table-hitbox","title":"table Hitbox","text":"<p>This the CollisionMask of the object</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#string-shape","title":"string Shape","text":"<p>Specifies the geometric shape of the physical object, which can be \"circle\" and \"custom\" for polygons, custom is has box hitbox by default, also is the default shape.</p>"},{"location":"documentation/autogen/PhysicalObject.html#number-mass","title":"number Mass","text":"<p>The object mass</p>"},{"location":"documentation/autogen/PhysicalObject.html#number-hitboxscale","title":"number HitboxScale","text":"<p>Change this property to change the hitbox size, the default value is 1</p>"},{"location":"documentation/autogen/PhysicalObject.html#number-collisiongroup","title":"number CollisionGroup","text":"<p>A number which indicates the collision group of the object, the object only can collide with other objects with the same CollisionGroup</p>"},{"location":"documentation/autogen/PhysicalObject.html#number-friction","title":"number Friction","text":"<p>Determines the resistance to sliding motion between this object and another surface, influencing how quickly it slows down.</p>"},{"location":"documentation/autogen/PhysicalObject.html#boolean-anchored","title":"boolean Anchored","text":"<p>This property defines if the object should have physics or not</p>"},{"location":"documentation/autogen/PhysicalObject.html#boolean-cancollide","title":"boolean CanCollide","text":"<p>This property defines if the object can collide with other objects</p>"},{"location":"documentation/autogen/PhysicalObject.html#boolean-isgrounded","title":"boolean IsGrounded","text":"<p>This property indicates if the object is touching the ground</p>"},{"location":"documentation/autogen/PhysicalObject.html#boolean-trackcollisions","title":"boolean TrackCollisions","text":"<p>This property defines if the object is going to have physics and collisions or not</p>"},{"location":"documentation/autogen/PhysicalObject.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/PhysicalObject.html#void-applyforceforce-vector2","title":"void ApplyForce(<code>force: Vector2</code>)","text":"<p>Applies force to the object</p>"},{"location":"documentation/autogen/PhysicalObject.html#events","title":"Events","text":"Name Description Collision Params -&gt; PhysicalObject  This event is fired when the object collides with other object CollisionEnd Params -&gt; PhysicalObject  This event is fired when the object finish the collision with other object"},{"location":"documentation/autogen/PluginSupportService.html","title":"PluginSupportService","text":""},{"location":"documentation/autogen/PluginSupportService.html#extended-from-eventemitter-pluginsupportservice","title":"Extended from EventEmitter PluginSupportService","text":"<p>This class save and build the engine data</p>"},{"location":"documentation/autogen/PluginSupportService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/PluginSupportService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/PluginSupportService.html#void-loadplugincontent","title":"void LoadPluginContent()","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/PluginSupportService.html#void-saveplugincontentcontent","title":"void SavePluginContent(<code>content: {}</code>)","text":"<p>Saves the engine data in replicated storage as attribute with the name \"UpsideEngineDB\" can be useful to create plugins</p>"},{"location":"documentation/autogen/PluginSupportService.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Request.html","title":"Request","text":""},{"location":"documentation/autogen/Request.html#extended-from-eventemitter-request","title":"Extended from EventEmitter Request","text":"<p>This class is used for the client replication</p>"},{"location":"documentation/autogen/Request.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Request.html#table-content","title":"table Content","text":"<p>The content of the request</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/Request.html#string-clientid","title":"string ClientId","text":"<p>The UserId of the client which sent the request if exists </p>"},{"location":"documentation/autogen/Request.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Request.html#void-sendcontent-dictionarystring-any","title":"void Send(<code>content: Dictionary&lt;string, any&gt;</code>)","text":"<p>Sends the request to the server</p>"},{"location":"documentation/autogen/Request.html#void-approve","title":"void Approve()","text":"<p>The request is approved and its replicated all the clients</p>"},{"location":"documentation/autogen/Request.html#baseobject-accept","title":"BaseObject Accept()","text":"<p>Accepts the request and builds the object to be replicated</p>"},{"location":"documentation/autogen/Request.html#player-getclient","title":"Player GetClient()","text":"<p>Returns the player which sent the request</p>"},{"location":"documentation/autogen/Request.html#events","title":"Events","text":"Name Description Build Params -&gt; BaseObject  Fired when a request is accepted and the object to be replicated is being built"},{"location":"documentation/autogen/Scene.html","title":"Scene","text":""},{"location":"documentation/autogen/Scene.html#extended-from-baseobject-scene","title":"Extended from BaseObject Scene","text":"<p>This class is useful to have a workspace and manage your project more easily</p>"},{"location":"documentation/autogen/Scene.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Scene.html#vector2-gravity","title":"Vector2 Gravity","text":"<p>The scene gravity</p>"},{"location":"documentation/autogen/Scene.html#boolean-onlytrackvisible","title":"boolean OnlyTrackVisible","text":"<p>This property defines whether physics should be calculated only for visible objects</p>"},{"location":"documentation/autogen/Scene.html#camera-camera","title":"Camera Camera","text":"<p>The scene camera</p>"},{"location":"documentation/autogen/Scene.html#lightingenvironment-lightingenvironment","title":"LightingEnvironment LightingEnvironment","text":"<p>This is the LightingEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#particleenvironment-particleenvironment","title":"ParticleEnvironment ParticleEnvironment","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#soundenvironment-soundenvironment","title":"SoundEnvironment SoundEnvironment","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#shaderenvironment-shaderenvironment","title":"ShaderEnvironment ShaderEnvironment","text":"<p>This is the ShaderEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#objectenvironment-objects","title":"ObjectEnvironment Objects","text":"<p>This environment stores all the objects in the scene</p>"},{"location":"documentation/autogen/Scene.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Scene.html#void-enable","title":"void Enable()","text":"<p>Enables the scene, which will make it process physics, lights, sounds and sprites</p>"},{"location":"documentation/autogen/Scene.html#void-disable","title":"void Disable()","text":"<p>Disables the scene</p>"},{"location":"documentation/autogen/Scene.html#array-gettaggedobjectstag-string","title":"Array GetTaggedObjects(<code>tag: string</code>) <p>Gets all the objects with the provided tags in the scene</p>","text":""},{"location":"documentation/autogen/Scene.html#raycast2dresult-raycastinfo-raycast2dparams","title":"Raycast2dResult Raycast(<code>info: Raycast2dParams</code>) <p>Casts a ray using the Raycast2dParams. If it finds an elegible object a Raycast2dResult is returned containing the results of the operations</p>","text":""},{"location":"documentation/autogen/Scene.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/SceneManager.html","title":"SceneManager","text":""},{"location":"documentation/autogen/SceneManager.html#extended-from-eventemitter-scenemanager","title":"Extended from EventEmitter SceneManager","text":"<p>This class save and build the engine data</p>"},{"location":"documentation/autogen/SceneManager.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/SceneManager.html#table-scenes","title":"table Scenes","text":"<pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/SceneManager.html#table-activescenes","title":"table ActiveScenes","text":"<p>This dictionary stores all the active scenes</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/SceneManager.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/SceneManager.html#scene-findbynamename-string","title":"Scene? FindByName(<code>name: string</code>)","text":"<p>Finds a scene by the name</p>"},{"location":"documentation/autogen/SceneManager.html#scene-getid-string","title":"Scene Get(<code>Id: string</code>)","text":"<p>Returns the scene with the specified Id</p>"},{"location":"documentation/autogen/SceneManager.html#events","title":"Events","text":"Name Description SceneLoaded Params -&gt; Scene   Fired when a scene is loaded SceneUnloaded Params -&gt; Scene   Fired when a scene is unloaded"},{"location":"documentation/autogen/Shader.html","title":"Shader","text":""},{"location":"documentation/autogen/Shader.html#extended-from-baseclass-shader","title":"Extended from BaseClass Shader","text":"<p>Warning</p> <p>Shaders are very cpu-intensive, so it is not recommended to use them with high resolution images and not to use too many shaders.</p> <p>If you need to scale an image, do it in the studio, instead of doing it in the editing program,  this will lighten a lot the work for the cpu.   </p> <p>This class is used to modify how an object is renderized</p>"},{"location":"documentation/autogen/Shader.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Shader.html#boolean-enabled","title":"boolean Enabled","text":"<p>This property determines if the shader is enabled</p>"},{"location":"documentation/autogen/Shader.html#number-precision","title":"number Precision","text":"<p>Sometimes, modifying the position of pixels in an image can create gaps.   Upside Engine automatically fills these gaps, but this can occasionally    lead to unwanted effects. Therefore, adjust this property according to your needs,    the value of this property ranges between 0 and 1.</p>"},{"location":"documentation/autogen/Shader.html#string-path","title":"string Path","text":"<p>This property stores the shader path</p>"},{"location":"documentation/autogen/Shader.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Shader.html#void-setsourcefile-modulescript","title":"void SetSource(<code>file: ModuleScript</code>)","text":"<p>Sets the module script which is going to be used as shader source</p>"},{"location":"documentation/autogen/Shader.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/ShaderEnvironment.html","title":"ShaderEnvironment","text":""},{"location":"documentation/autogen/ShaderEnvironment.html#extended-from-environment-shaderenvironment","title":"Extended from Environment ShaderEnvironment","text":""},{"location":"documentation/autogen/ShaderEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/ShaderEnvironment.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/ShaderEnvironment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Sound.html","title":"Sound","text":""},{"location":"documentation/autogen/Sound.html#extended-from-baseobject-sound","title":"Extended from BaseObject Sound","text":"<p>This class is used to play sounds</p>"},{"location":"documentation/autogen/Sound.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Sound.html#number-range","title":"number Range","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/Sound.html#number-maxvolume","title":"number MaxVolume","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/Sound.html#boolean-distancefading","title":"boolean DistanceFading","text":"<p>The volume will depend on the player distance</p>"},{"location":"documentation/autogen/Sound.html#character-subject","title":"Character Subject","text":"<p>This table stores all the objects in the scene</p>"},{"location":"documentation/autogen/Sound.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Sound.html#void-setsubjectsubject-character-usescenesoundgroup-boolean","title":"void SetSubject(<code>subject: Character, useSceneSoundGroup: boolean?</code>)","text":"<p>Sets the provided character as subject, if is provided a sound group, this will be the new sound group of the sound</p>"},{"location":"documentation/autogen/Sound.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/SoundEnvironment.html","title":"SoundEnvironment","text":""},{"location":"documentation/autogen/SoundEnvironment.html#extended-from-environment-soundenvironment","title":"Extended from Environment SoundEnvironment","text":""},{"location":"documentation/autogen/SoundEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/SoundEnvironment.html#methods","title":"Methods","text":"<p>There is no methods for this class</p>"},{"location":"documentation/autogen/SoundEnvironment.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/Sprite.html","title":"Sprite","text":""},{"location":"documentation/autogen/Sprite.html#extended-from-physicalobject-sprite","title":"Extended from PhysicalObject Sprite","text":"<p>This class is used to play sounds</p>"},{"location":"documentation/autogen/Sprite.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Sprite.html#boolean-isplaying","title":"boolean IsPlaying","text":"<p>Indicates if the sprite is playing</p>"},{"location":"documentation/autogen/Sprite.html#number-secondsperframe","title":"number SecondsPerFrame","text":"<p>This is the time to wait between frame and frame</p>"},{"location":"documentation/autogen/Sprite.html#table-sprites","title":"table Sprites","text":"<p>This table stores all sprite sheets and sprite lists </p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/Sprite.html#table-active","title":"table Active","text":"<p>This table stores information about the active spritesheet</p> <pre><code>{\n    Name: string,\n    CurrentFrame: Vector2,\n    SecondsPerFrame: number,\n    NextStepReady: boolean,\n}\n</code></pre>"},{"location":"documentation/autogen/Sprite.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Sprite.html#void-setspritesheetname-string-url-string-frames-vector2","title":"void SetSpriteSheet(<code>name: string, url: string, frames: Vector2</code>)","text":"<p>Adds a new sprite sheet to the object, the sprite will be played using as reference the amount of cells in the X axe and the Y axe, this must be provided in the third paramether as a Vector2</p>"},{"location":"documentation/autogen/Sprite.html#void-setspritelistname-string-list-arraystring","title":"void SetSpriteList(<code>name: string, list: Array&lt;string&gt;</code>)","text":"<p>Adds a new sprite list to the object, it will play the animation using the order in the provided list, this list must contain the urls of every frame</p>"},{"location":"documentation/autogen/Sprite.html#void-playname-string-secondsperframe-number","title":"void Play(<code>name: string, secondsPerFrame: number?</code>)","text":"<p>Plays the specified sprite if exists, if secondsEveryFrame is specified it will be used instead of .SecondsPerFrame</p>"},{"location":"documentation/autogen/Sprite.html#void-stop","title":"void Stop()","text":"<p>Stops the reproduction of the current playing sprite sheet or sprite list</p>"},{"location":"documentation/autogen/Sprite.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/autogen/StaticObject.html","title":"StaticObject","text":""},{"location":"documentation/autogen/StaticObject.html#extended-from-baseobject-staticobject","title":"Extended from BaseObject StaticObject","text":"<p>This class is used to create a basic object, without physics or animations</p>"},{"location":"documentation/autogen/StaticObject.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/StaticObject.html#vector2-chromaticaberrationpoint","title":"Vector2 ChromaticAberrationPoint","text":"<p>This is the point which is being used as reference for the chromatic aberration</p>"},{"location":"documentation/autogen/StaticObject.html#table-chromaticaberration","title":"table ChromaticAberration","text":"<p>The instances which makes the chromatic aberration effect</p> <pre><code>{ }\n</code></pre>"},{"location":"documentation/autogen/StaticObject.html#shader-shader","title":"Shader Shader","text":"<p>Is the shader of the object</p>"},{"location":"documentation/autogen/StaticObject.html#number-chromaticaberrationintensity","title":"number ChromaticAberrationIntensity","text":""},{"location":"documentation/autogen/StaticObject.html#number-chromaticaberrationdistance","title":"number ChromaticAberrationDistance","text":""},{"location":"documentation/autogen/StaticObject.html#boolean-chromaticaberrationconnection","title":"boolean ChromaticAberrationConnection","text":""},{"location":"documentation/autogen/StaticObject.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/StaticObject.html#void-setshadershader-shader","title":"void SetShader(<code>shader: Shader</code>)","text":"<p>Sets the shader for this object</p>"},{"location":"documentation/autogen/StaticObject.html#void-loadurl-string","title":"void Load(<code>url: string</code>)","text":"<p>Loads an image for the current object and is set as the instance image</p>"},{"location":"documentation/autogen/StaticObject.html#void-setchromaticaberrationintensity-number-distance-number-point-vector2","title":"void SetChromaticAberration(<code>Intensity: number, Distance: number, Point: Vector2</code>)","text":"<p>Sets chromatic aberration for the image using a center as reference, by default the center is the middle of the screen,   to disable the chromatic aberration send 0 as first parameter</p>"},{"location":"documentation/autogen/StaticObject.html#events","title":"Events","text":"<p>There is no events for this class</p>"},{"location":"documentation/datatypes/ClassData.html","title":"UpsideEngineInput","text":"<p>A ClassData represents the data needed to extend a class </p> <p></p>"},{"location":"documentation/datatypes/ClassData.html#properties","title":"Properties","text":"<pre><code>{\n    name -&gt; string,\n    constructor -&gt; Dictionary&lt;string, () -&gt; ()&gt;,\n    methods -&gt; Dictionary&lt;string, () -&gt; ()&gt;,\n    private -&gt; Dictionary&lt;string, any&gt;,\n    readonly -&gt; Dictionary&lt;string, any&gt;,\n    rules -&gt; Dictionary&lt;string, any&gt;,\n}\n</code></pre>"},{"location":"documentation/datatypes/Raycast2DParams.html","title":"Raycast2DParams","text":"<p>The parameters for a raycast operation</p> <p></p>"},{"location":"documentation/datatypes/Raycast2DParams.html#properties","title":"Properties","text":"<pre><code>{\n    FilterType -&gt; \"Whitelist\", -- Whitelist/Blacklist\n    From -&gt; Vector2.new(),\n    To -&gt; Vector2.new(),\n    List -&gt; { ... } -- Dictionary&lt;objectID, object&gt;\n}\n</code></pre>"},{"location":"documentation/datatypes/Raycast2DResult.html","title":"Raycast2DResult","text":"<p>The result of a raycast operation</p> <p></p>"},{"location":"documentation/datatypes/Raycast2DResult.html#properties","title":"Properties","text":"<pre><code>{\n    Object -&gt; PhysicalObject\n    Position -&gt; UDim2\n    Distance -&gt; number\n    Normal -&gt; UDim2\n}\n</code></pre>"},{"location":"documentation/datatypes/UpsideEngineInput.html","title":"UpsideEngineInput","text":"<p>An UpsideEngineInput represents a single user input, such as joystick movement, key presses, mobile actions and more </p> <p></p>"},{"location":"documentation/datatypes/UpsideEngineInput.html#properties","title":"Properties","text":"<pre><code>{\n    Action -&gt; string,\n    Position -&gt; Vector2,\n    KeyCode -&gt; KeyCode,\n}\n</code></pre>"},{"location":"tutorials/Welcome.html","title":"Welcome to the Upside Engine Tutorial Section!","text":""},{"location":"tutorials/Welcome.html#explore-learn-and-create","title":"Explore, Learn, and Create!","text":"<p>We are thrilled to welcome you to the tutorial section of Upside Engine, our advanced yet easy-to-use 2D engine for Roblox. Here, you'll find a series of detailed guides designed to help you make the most powerful 2d games on the platform.</p>"},{"location":"tutorials/Welcome.html#community-forum","title":"Community Forum","text":"<p>Join our community of passionate developers. Here, you can share your projects, receive feedback, collaborate on new concepts, and solve doubts with the help of other members and experts in Upside Engine.</p>"},{"location":"tutorials/Welcome.html#what-youll-find-in-this-section","title":"What You'll Find in This Section","text":"<p>Thank you for joining us on this exciting adventure! We look forward to seeing the amazing games you create and hope you enjoy using Upside Engine as much as we enjoy developing it.</p> <p>Happy Developing!</p>"},{"location":"tutorials/Welcome.html#step-by-step-tutorials","title":"Step-by-Step Tutorials","text":"<p>Our tutorials are crafted to guide you from the basics to the most advanced techniques in 2D game development using Upside Engine in Roblox. Each tutorial is structured to provide progressive learning, with practical examples and clear explanations.</p>"},{"location":"tutorials/Welcome.html#user-graphic-interface","title":"User Graphic Interface","text":"<p>Our user interface is designed to be intuitive and user-friendly, making it easy for developers to create their games. Learn how to navigate and use the Upside Engine UI to create the most fun experiences.</p>"},{"location":"tutorials/Welcome.html#code-examples","title":"Code Examples","text":"<p>We include Luau code examples that you can use as references or starting points for your own projects. These examples will show you how to implement various functionalities, from basic physics to advanced visual effects.</p>"},{"location":"tutorials/Welcome.html#the-upside-engine-development-team","title":"\u2014 The Upside Engine Development Team","text":""},{"location":"tutorials/get-started/FirstGame.html","title":"Your first game","text":"<p>In this guide, we'll walk you through the process of creating a basic game scenario using Upside Engine, a framework for Roblox 2d game development.</p> <p>Tip</p> <p>In this guide we are going to use Offset, scale should never be used for a 2D game, as it is problematic on some devices, it is recommended that when building your game you use 1920x1080 resolution in the device emulator as it will adapt to most devices.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-1-setting-up-the-scene","title":"Step 1: Setting up the scene","text":"<p>The first thing we need to do is to create a scenario for our game. To do this, we'll use the <code>Scene</code> object, which is a useful tool for creating scenarios quickly and easily.</p> Warning <p>If you are using roblox studio, the scripts with \"init\" as name works different, means that all the scripts in the same directory are gonna be children of that script, so to explain it easier, just create a local script named \"Client\" in StarterPlayerScripts and place any <code>module script</code> as a children of it.</p> <p>example: </p> <p></p> <p>In your <code>init.client.luau</code> script, add the following code:</p> <p><pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal tweenService = game:GetService(\"TweenService\")\nlocal players = game:GetService(\"Players\")\n\nlocal packages = replicatedStorage.packages\nlocal playerGui = players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal screen = Instance.new(\"ScreenGui\")\nscreen.Name = \"MyGame\"\nscreen.IgnoreGuiInset = true\nscreen.Parent = playerGui\n\nlocal scene = upsideEngine.new(\"Scene\")\nscene.Instance.Parent = screen\nscene:SetName(\"MyFirstScene\") -- We set the scene name\nscene:Enable() -- We mark as enabled the scene\n</code></pre> This code creates a new Scene object and adds it to the PlayerGui object in your game.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-2-creating-the-floor","title":"Step 2: Creating the floor","text":"<p>Now that we have our scene set up, we can create a floor for our game. To do this, we'll use the PhysicalObject object.</p> <p><pre><code>local leftFloor = upsideEngine.new(\"PhysicalObject\")\nleftFloor.Anchored = true\nleftFloor:SetScene(scene)\n\nlocal lfInstance = leftFloor.Instance\nlfInstance.Image = \"rbxassetid://12980969571\" -- We set the floor texture\nlfInstance.Size = UDim2.fromOffset(600, 160) -- We set the size to 600x160 pixels\nlfInstance.Position = UDim2.fromOffset(300, 1000) -- We set the position to 300x1000 pixels\n\nlocal rightFloor = upsideEngine.new(\"PhysicalObject\") -- We create the floor and pass the scene as the parent object\nrightFloor.Anchored = true\nrightFloor:SetScene(scene)\n\nlocal rfInstance = rightFloor.Instance\nrfInstance.Image = \"rbxassetid://12980969571\" -- We set the floor texture\nrfInstance.Size = UDim2.fromOffset(600, 160) -- We set the size to 600x160 pixels\nrfInstance.Position = UDim2.fromOffset(1620, 1000) -- We set the position to 1620x1000 pixels\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the floor's texture and size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-3-creating-a-background","title":"Step 3: Creating a background","text":"<p>Next, let's add a background to our game. This time we'll use another PhysicalObject object, but we'll set it up a little differently.</p> <p><pre><code>local background = Instance.new(\"Frame\")\nbackground.BackgroundTransparency = 0 -- We set the background transparency\nbackground.BackgroundColor3 = Color3.fromRGB(27, 62, 82)\nbackground.Size = UDim2.fromScale(1, 1) -- We set the size to the target screen size\nbackground.Position = UDim2.fromOffset(0.5, 0.5) -- We set the position to the center\nbackground.ZIndex = -1\nbackground.Parent = scene.Instance.Parent\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the background's texture and size to the full screen size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-4-adding-decoration","title":"Step 4: Adding decoration","text":"<p>Next, let's add a the decoration to our game. This time we'll use another PhysicalObject object, but we'll set it up a little differently.</p> <p><pre><code>local decoration = upsideEngine.new(\"PhysicalObject\") -- We create the decoration and pass the scene as the parent object\ndecoration.TrackCollisions = false\ndecoration:SetScene(scene)\n\nlocal decInstance = decoration.Instance\ndecInstance.Image = \"rbxassetid://12993235175\" -- We set the decoration texture\ndecInstance.Size = UDim2.fromOffset(1920, 1080) -- We set the size to the target screen size\ndecInstance.Position = UDim2.fromOffset(960, 540) -- We set the position to the center\ndecInstance.ZIndex = 0\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the background's texture and size to the full screen size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-5-creating-platforms","title":"Step 5: Creating platforms","text":"<p>Finally, let's create some interactive platforms for our game, we will create a platform that falls once it detects a collision.</p> <pre><code>-- Create platform object and set properties\nlocal function createPlatform(x, y)\n    local position = UDim2.fromOffset(x, y)\n    local platform = upsideEngine.new(\"PhysicalObject\")\n    platform:SetScene(scene)\n    platform.Mass = 0\n    platform.Anchored = false\n\n    local platInstance = platform.Instance\n    platInstance.Image = \"rbxassetid://12979703349\"\n    platInstance.Size = UDim2.fromOffset(250, 80)\n    platInstance.Position = position\n    platInstance.ZIndex = 2\n\n    -- Create Tween to animate platform to its original position on collision\n    local info = TweenInfo.new(1)\n    local goal = { Position = position }\n\n    local toOrigin = tweenService:Create(platform.Instance, info, goal)\n    local falling = false\n    toOrigin.Completed:Connect(function()\n        falling = false\n    end)\n\n    -- Listen to the \"Collision\" event\n    platform:On(\"Collision\", function(object) -- Create a function to detect when the plaform collides\n        if not object:IsA(\"Character\") or falling then\n            return\n        end\n\n        task.wait(1)\n        falling = true\n        platform.Mass = 200\n\n        task.wait(5)\n        platform.Mass = 0\n        platform.Force = Vector2.zero\n\n        toOrigin:Play()\n    end)\nend\n\ncreatePlatform(800, 900)\ncreatePlatform(1120, 900)\n\nfor _, scr in script:GetChildren() do\n    require(scr) --Initializate the secondary scripts\nend\n</code></pre>"},{"location":"tutorials/get-started/FirstGame.html#congratulations-youve-now-created-your-first-scenario-using-upside-engine","title":"Congratulations! You've now created your first scenario using Upside Engine \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/get-started/GraphicInterface.html","title":"Upside Engine Plugin","text":"<p>Upside Engine GUI is a powerful and accessible tool designed for creating 2D games in Roblox. This plugin provides an intuitive graphical interface that significantly simplifies the development process, allowing developers to focus on creativity and design.</p> <p>Get the Plugin</p> <p>Warning</p> <p>By playing this video, you agree youtube cookies</p>"},{"location":"tutorials/get-started/Installation.html","title":"Installation","text":"Working-with-roblox-studio <p>This tutorial is oriented to external code editors, so there are probably some terms that you do not understand if you only use roblox studio, so here are some clarifications:</p> <ul> <li>When the tutorial talks about <code>whatever.client.luau</code> or <code>whatever.server.luau</code>:<ul> <li>in the .client case is talking about a local script inside StarterPlayerScripts.</li> <li>in the .server case is talking about a script inside ServerScriptService.</li> </ul> </li> <li>When the tutorial talks about any script like for example <code>whatever.client.luau</code>, the script's name would be everything before the first dot. In this case, it would be \"whatever\".</li> <li>When the tutorial doesn't specify if a script is a local script or a server script in the script name (example: <code>whatever.luau</code>), the tutorial is talking about a module script.</li> <li>When we talk about <code>src/client</code> we are are talking about <code>StarterPlayerScripts</code>.</li> </ul> <p>Follow this steps to \"install\" the package in roblox studio</p> <ul> <li>Create a folder in ReplicatedStorage and then name it as \"packages\"</li> <li>Place the upside engine module in the packages folder (click on the download button below to get the module)</li> <li>Once you finished the steps before, continue the tutorial in the \"An important step\" section.</li> </ul> <p>Download Upside Engine</p>"},{"location":"tutorials/get-started/Installation.html#project-setup","title":"Project Setup","text":"<p>For this tutorial, we will need the following:</p> <ul> <li>Initialize Git</li> <li>Start a new project with Rojo</li> </ul>"},{"location":"tutorials/get-started/Installation.html#downloading-upside-engine","title":"Downloading Upside Engine","text":"<p>To install the Upside Engine Framework, we can use github submodules or wally</p>"},{"location":"tutorials/get-started/Installation.html#github-submodules","title":"Github submodules","text":"<p>To install upside engine with github submodules run this command: <pre><code>git submodule add https://github.com/TheHackerPuppy/UpsideEngine packages/UpsideEngine\n</code></pre></p>"},{"location":"tutorials/get-started/Installation.html#wally","title":"Wally","text":"<p>To install upside engine with wally add this line to your <code>wally.toml</code>: <pre><code>UpsideEngine = \"notreux/upside-engine@3.0.0\"\n</code></pre></p>"},{"location":"tutorials/get-started/Installation.html#recommended-rojo-template","title":"Recommended Rojo Template","text":"<p>To install the Upside Engine Framework, use the following command to create a new folder named \"packages\" with the Upside Engine Framework inside:</p> Info <pre><code>{\n   \"name\": \"My first 2D Game\",\n    \"tree\": {\n        \"$className\": \"DataModel\",\n        \"ReplicatedStorage\": {\n            \"$className\": \"ReplicatedStorage\",\n            \"packages\": {\n                \"$className\": \"Folder\",\n                \"$path\": \"packages\"\n            }\n        },\n\n        \"StarterPlayer\": {\n            \"$className\": \"StarterPlayer\",\n            \"StarterPlayerScripts\": {\n                \"$className\": \"StarterPlayerScripts\",\n                \"client\":{\n                    \"$path\": \"src/client\"\n                }\n            }\n        },\n\n        \"ServerScriptService\": {\n            \"$className\": \"ServerScriptService\",\n            \"server\": {\n                \"$path\":\"src/server\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tutorials/get-started/Installation.html#recommended-lsp","title":"Recommended LSP","text":"<p>For the best experience, we recommend to use the LuauLSP extension for Visual Studio Code.</p> Typescript-types <p>You can also use typescript, just be sure you have installed roblox-ts</p> <p>Once you have installed LuauLSP then go to extension settings and search \u201cDefinition Files\u201d</p> <p></p>"},{"location":"tutorials/get-started/Installation.html#github-submodules_1","title":"Github submodules","text":"<p>Click on \"Add Item\" and then enter this path <code>packages/UpsideEngine/upside-engine.d.luau</code>. Then click again on \"Add Item\" and then enter this path too <code>packages/UpsideEngine/src/init.d.luau</code>.</p>"},{"location":"tutorials/get-started/Installation.html#wally_1","title":"Wally","text":"<p>Warning</p> <p>In the paths below change <code>VERSION</code> for the version you are using, for example, if you use the version 3.0.0 change the path to <code>Packages/_Index/notreux_upside-engine@3.0.0/upside-engine.d.luau</code></p> <p>Click on \"Add Item\" and then enter this path <code>Packages/_Index/notreux_upside-engine@VERSION/upside-engine.d.luau</code>. Then click again on \"Add Item\" and then enter this path too <code>Packages/_Index/notreux_upside-engine@VERSION/src/init.d.luau</code>.</p>"},{"location":"tutorials/get-started/Installation.html#an-important-step","title":"An important step","text":"<p>To ensure that the Upside Engine works correctly, it is important to initialize the engine on the server, even if you are not using any server-side functionality. This is because some services, such as <code>NetworkingService</code>, depend on the server side.</p> <p>We will create a new script <code>initializer.server.luau</code> in <code>ServerScriptService</code> with the following content:</p> <pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal packages = replicatedStorage.packages\n\nlocal upsideEngine = require(packages.UpsideEngine)\nprint(\"Upside Engine version: \" .. upsideEngine.Version)\n</code></pre>"},{"location":"tutorials/get-started/Installation.html#congratulations-you-finished-the-installation-of-the-upside-engine-framework","title":"Congratulations you finished the installation of the upside engine framework \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/get-started/LicensePage.html","title":"License","text":"<p>The Upside Engine Framework has an Apache 2.0 License, so you can use this engine for anything you want, it will always be mandatory to give credits except if it is for a videogame <code>(but it would be very appreciated)</code>, for any other kind of projects it will be mandatory to give credits, you can read more about this license here .</p> <p>If you still have any doubt on how can you use the upside engine framework in your projects ask us in our discord .</p>"},{"location":"tutorials/get-started/Music.html","title":"Music","text":"<p>We'll create a new script called <code>radio.luau</code> in the <code>src/client</code> folder. We are going to add inmersive background music, for this we are going to create a Sprite that represents a radio that is going to have a song gets louder when you get closer to it </p> <pre><code>-- Get necessary services\nlocal replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal packages = replicatedStorage.packages\n\n-- Require the upside engine module\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal sceneManager = upsideEngine.GetService(\"SceneManager\")\nlocal scene = sceneManager:FindByName(\"MyFirstScene\")\n\n-- Create the radio\nlocal radio = upsideEngine.new(\"Sprite\")\nradio.Instance.ImageRectSize = Vector2.new(37, 64)\nradio.TrackCollisions = false\nradio:SetScene(scene)\nradio:SetSpriteSheet(\"default\", \"rbxassetid://12908065852\", Vector2.new(14, 1)) -- We pass 14, 1 to say we have 1 row and 14 columns\nradio:Play(\"default\")\n\nlocal radioInstance = radio.Instance\nradioInstance.Size = UDim2.fromOffset(128, 128)\nradioInstance.Position = UDim2.fromOffset(1540, 865)\nradioInstance.ZIndex = 1\n\n-- Create a new sound\nlocal music = upsideEngine.new(\"Sound\")\nmusic.Instance.SoundId = \"rbxassetid://1844102827\"\nmusic.Instance:Play()\nmusic.Range = 1500\nmusic:SetScene(scene)\nmusic:SetSubject(radio)\n</code></pre> <p>Bug</p> <p>Remember that you are using a module script, don't forget to return a value at the end of the script! <pre><code>return {}\n</code></pre></p> <p>You can view and edit the finished project here.</p>"},{"location":"tutorials/get-started/Music.html#great-job-you-have-successfully-learned-the-fundamentals-of-the-upside-engine-framework-the-following-pages-are-dedicated-to-interesting-information-that-you-may-want-to-know","title":"Great job! You have successfully learned the fundamentals of the Upside Engine framework \ud83c\udf89\ud83c\udf89 The following pages are dedicated to interesting information that you may want to know","text":""},{"location":"tutorials/get-started/PlayerCharacter.html","title":"Creating the Player Character","text":"<p>To create the player character, we will need to create a new script named <code>character.luau</code> in the <code>src/client</code> folder and add the following code:</p> <p><pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal runService = game:GetService(\"RunService\")\nlocal packages = replicatedStorage.packages\n\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal sceneManager = upsideEngine.GetService(\"SceneManager\")\nlocal crossPlatformService = upsideEngine.GetService(\"CrossPlatformService\")\n\nlocal scene = sceneManager:FindByName(\"MyFirstScene\")\nlocal spawn_position = UDim2.fromOffset(350, 800)\n\nlocal player = upsideEngine.new(\"Character\")\nplayer.Anchored = false\nplayer.JumpPower = 100\nplayer:SetScene(scene)\nplayer:SetSpriteSheet(\"idle_right\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"idle_left\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"right\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"up\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"left\", \"rbxassetid://12970115106\", Vector2.new(12, 1))\n\nlocal plrInstance = player.Instance\nplrInstance.ZIndex = 2\nplrInstance.ImageRectSize = Vector2.new(37, 64)\nplrInstance.Size = UDim2.fromOffset(100, 100)\n</code></pre> This code creates a new character object in the game's scene using the Upside Engine framework. The character object is stored in a variable named \"player\".</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#adding-animations","title":"Adding Animations","text":"<p>Tip</p> <p>Some words like \"idle_right\", \"idle_left\", \"left\" or \"up\" can be played automatically by CrossPlatformService, which means that it is not necessary to play them if <code>CrossPlatformService.DefaultControllersEnabled</code> is set to true.</p> <p>As we saw in the previous code example, we can add animations to our player character using sprite sheets. <pre><code>player:SetSpriteSheet(\"idle_right\", \"rbxassetid://12908048527\", Vector2.new(1, 12))\n</code></pre></p> <p>This sets the sprite sheet for the \"idle\" animation, using the ID of the asset and also pass the number of rows and columns as a Vector2, for example we have 5 frames in the in two lines, the expected Vector2 would be <code>Vector2.new(2, 5)</code>.</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#adding-player-controllers","title":"Adding Player Controllers","text":"<p>To add player controllers, we need to use the CrossPlatformService which was required in the previously:</p> <p><pre><code>crossPlatformService:SetPlayerCharacter(player)\n</code></pre> This sets the player character as the subject of the CrossPlatformService, allowing for control inputs to be applied to the character</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#camera-setup","title":"Camera Setup","text":"<p>To make the camera follow the character, we will need to define the player as the camera subject. We can achieve this by using the following code:</p> <pre><code>scene.Camera:SetSubject(player)\n</code></pre>"},{"location":"tutorials/get-started/PlayerCharacter.html#avoid-infinity-fall","title":"Avoid infinity fall","text":"<p>To avoid that when our character falls, it stays falling infinitely, we will use the following code:</p> <pre><code>runService.Heartbeat:Connect(function()\n    local instance = player.Instance\n    if instance.Position.Y.Offset &lt; 1000 then\n        return\n    end\n\n    instance.Position = spawn_position\nend)\n</code></pre> <p>Bug</p> <p>Remember that you are using a module script, don't forget to return a value at the end of the script! <pre><code>return {}\n</code></pre></p>"},{"location":"tutorials/get-started/PlayerCharacter.html#congratulations-youve-now-created-your-first-player-character-using-upside-engine","title":"Congratulations! You've now created your first player character using Upside Engine \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/multiplayer-game/client.html","title":"Client Side","text":"<p>To create a multiplayer game we will need to import upside engine.</p>"},{"location":"tutorials/multiplayer-game/client.html#a-basic-setup","title":"A basic setup","text":"<p>Let's do a basic setup of our multiplayer game game</p> <pre><code>local players = game:GetService(\"Players\")\nlocal replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal playerGui = players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nlocal upsideEngineModule = game.ReplicatedStorage:WaitForChild(\"UpsideEngine\")\nlocal upsideEngine = require(upsideEngineModule)\n\nlocal sceneManager = upsideEngine.GetService(\"SceneManager\")\nlocal crossPlatformService = upsideEngine.GetService(\"CrossPlatformService\")\nlocal networkingService = upsideEngine.GetService(\"NetworkingService\")\n\nlocal screen = Instance.new(\"ScreenGui\")\nscreen.Name = \"MultiplayerGame\"\nscreen.IgnoreGuiInset = true\nscreen.Parent = playerGui\n\nlocal scene = upsideEngine.new \"Scene\"\nscene.Instance.Parent = screen\nscene:Enable()\n</code></pre>"},{"location":"tutorials/multiplayer-game/client.html#creating-the-scenario","title":"Creating the scenario","text":"<p>Let's create a basic scenario for our players <pre><code>local Terrain = upsideEngine.new \"PhysicalObject\"\nTerrain:SetScene(scene)\n\nlocal terrInstance = Terrain.Instance\nterrInstance.Visible = true\nterrInstance.Position = UDim2.fromOffset(0, 0)\nterrInstance.Size = UDim2.fromOffset(600, 160)\nterrInstance.Image = \"rbxassetid://12980969571\"\n</code></pre></p>"},{"location":"tutorials/multiplayer-game/client.html#creating-the-character","title":"Creating the character","text":"<p>Let's create our player character <pre><code>local character = upsideEngine.new \"Character\"\ncharacter.Anchored = false\ncharacter.CanCollide = true\ncharacter:SetScene(scene)\ncharacter:SetName(game.Players.LocalPlayer.Name)\ncharacter:SetSpriteSheet(\"idle\", \"rbxassetid://12908048527\", Vector2.new(12, 1 ))\ncharacter:Play(\"idle\")\n\nlocal charInstance = character.Instance\ncharInstance.ImageRectSize = Vector2.new(37.35, 37.35)\ncharInstance.Position = UDim2.fromOffset(0, -1000)\ncharInstance.Size = UDim2.fromOffset(100, 100)\n\ncrossPlatformService:SetPlayerCharacter(character)\nscene.Camera:SetSubject(character)\n</code></pre></p>"},{"location":"tutorials/multiplayer-game/client.html#client-replication","title":"Client replication","text":"<p>As the name say, when we use <code>:ReplicateOnChange()</code>, the object will be replicated if some of his properties change. </p> <p>Events information:</p> <ul> <li>The <code>ReplicationRequest</code> event is fired every time that an object from other client replicates an object</li> <li>The <code>Build</code> event is fired when a request is accepted and the object to replicate never was replicated before</li> </ul> <pre><code>networkingService:ReplicateOnChange(character)\nnetworkingService:On(\"Build\", function(object)\n    -- Its recomended to unanchor the object, it will make the movement smoother\n    -- that's because the Anchor property is not replicated by default\n    object.Anchored = false\n    object:SetScene(scene)\nend)\n\nnetworkingService:On(\"ReplicationRequest\", function(request)\n    request:Accept() -- It returns the replicated object\nend)\n</code></pre>"},{"location":"tutorials/multiplayer-game/client.html#congratulations-you-finished-the-replication-tutorial-in-the-client-side-lets-see-next-page","title":"Congratulations you finished the replication tutorial in the client side, Let's see next page \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/multiplayer-game/server.html","title":"Server Side","text":"<p>When an object is replicated, a request is sent to the server, every time this happens the <code>ReplicationRequest</code> event is fired on the server side, here the server can perform some security checks if you want.</p>"},{"location":"tutorials/multiplayer-game/server.html#without-security-checks","title":"Without security checks","text":"<pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal upsideEngineModule = replicatedStorage:WaitForChild(\"UpsideEngine\")\n\nlocal upsideEngine = require(upsideEngineModule)\nlocal networkingService = upsideEngine.GetService(\"NetworkingService\")\n\nnetworkingService:On(\"ReplicationRequest\", function(request)\n    request:Approve()\nend)\n</code></pre>"},{"location":"tutorials/multiplayer-game/server.html#with-security-checks","title":"With security checks","text":"<p>In this example we check how much the player's character has moved since the last replication, doing this we can detect if the player is using exploits. <pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal players = game:GetService(\"Players\")\n\nlocal upsideEngineModule = replicatedStorage:WaitForChild(\"UpsideEngine\")\nlocal upsideEngine = require(upsideEngineModule)\n\nlocal networkingService = upsideEngine.GetService(\"NetworkingService\")\nlocal pastPositions = {}\n\nnetworkingService:On(\"ReplicationRequest\", function(request)\n    local instance = request.Content.Instance\n    local clientId = request.ClientId\n\n    if not instance.Position then\n        request:Approve()\n        return\n    end\n\n    local currentPosition = Vector2.new(instance.Position.X.Offset, instance.Position.Y.Offset)\n    local previousPosition = pastPositions[clientId] or Vector2.zero\n\n    local distance = (currentPosition - previousPosition).Magnitude\n    pastPositions[clientId] = currentPosition\n\n    if distance &lt; 1100 then\n        request:Approve()\n        return\n    end\n\n    -- The player is moving faster than expected, so is probably exploiting\n    -- maybe players with lag can have false positives, so be carefull with the distance check\n\n    local player = players:GetPlayerByUserId(clientId)\n    player:Kick(\"please don't exploit\")\nend)\n</code></pre></p>"},{"location":"tutorials/plugin-guide/CollisionEditor.html","title":"Using collision editor","text":"<p>On this page, you will learn an essential tool to make better collisions for your game objects.</p> <p></p>"},{"location":"tutorials/plugin-guide/CollisionEditor.html#introduction-to-collision-mask","title":"Introduction to collision mask","text":"<p>Click on the Collision Editor button, and a new window named \"Collision Editor\" will appear. In this interface, you can easily create a collision mask.</p> <p></p>"},{"location":"tutorials/plugin-guide/CollisionEditor.html#a-basic-usage","title":"A basic usage","text":"<p>Select an object, and to start from scratch Let's remove the whole collision mask, for this we will right click 4 times on every red point.</p> <p></p> <p>Now we can draw our collision mask, Let's draw a mask around the object, for this we will use left click.</p>"},{"location":"tutorials/plugin-guide/CollisionEditor.html#congratulations-you-are-ready-create-collision-masks-lets-move-on-to-the-next-page","title":"Congratulations! you are ready create collision masks, let's move on to the next page \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/plugin-guide/FirstSteps.html","title":"First steps","text":"<p>On this page, you will learn how to manage scenes and create objects for your 2D game projects with the graphic interface of upside engine.</p> <p></p>"},{"location":"tutorials/plugin-guide/FirstSteps.html#introduction-to-scene-manager","title":"Introduction to scene manager","text":"<p>Click on the Scene Manager button, and a new window called \"Scene Manager\" will appear. Here, you can manage all the scenes of your game. To create a scene, click on \"New Scene.\"</p> <p></p> <p>Now that we have created a scene, you can rename it by clicking on the scene name. You can also delete it by clicking on the \"Delete\" button.</p> <p></p>"},{"location":"tutorials/plugin-guide/FirstSteps.html#introduction-to-explorer","title":"Introduction to explorer","text":"<p>Now, let's open the Explorer window. Click on the Explorer button.</p> <p></p> <p>Open the previously created scene by clicking on the \"Open\" button. This will load the scene in the Explorer window.</p> <p></p> <p>Now, let's create an object. Click on the \"Create Object\" button. This will display a menu with different types of objects you can create. Choose a \"PhysicalObject.\"</p> <p></p> <p>Once you've created the object, you'll see a new element in the Explorer (also on the screen), usually with a strange name like <code>\"unnamed-12345789\"</code>. If you double-click on it, you can rename it.</p> <p></p> <p>Right-click on it to see a menu with options: <code>\"Delete\"</code>, <code>\"Clone\"</code> and <code>\"MoveTo\"</code>. The first two options are intuitive, but the third one is not. The \"MoveTo\" option is used to move an object between environments or to the main scene. You can think of an environment as something like a folder.</p> <p></p> <p>Some specific objects have their own options, like particles, for example. Once you set a subject, you can have \"live editing\" of the particles.</p> <p></p> <p>To edit a property, select the object you want to edit, and then go to the Roblox properties window. Here, you can edit any object property.</p> <p></p>"},{"location":"tutorials/plugin-guide/FirstSteps.html#shortcuts","title":"Shortcuts","text":"<p>There are some useful shortcuts:</p> <ul> <li>Left Shift+D to clone an object</li> <li>Backspace to destroy an object</li> </ul>"},{"location":"tutorials/plugin-guide/FirstSteps.html#movement","title":"Movement","text":"<p>If you press W A S D, you will navigate through the scenario.</p>"},{"location":"tutorials/plugin-guide/FirstSteps.html#congratulations-you-already-know-the-essentials-lets-move-on-to-the-next-page","title":"Congratulations! you already know the essentials, let's move on to the next page \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/plugin-guide/PluginScripts.html","title":"Plugin Scripts","text":"<p>Now you are ready to use the plugin, but you can't run the game only with the plugin, so you will need to import upside engine and also some code. </p>"},{"location":"tutorials/plugin-guide/PluginScripts.html#import-upside-engine","title":"Import upside engine","text":"<p>Follow this steps to import upside engine</p> <ul> <li>Create a folder in ReplicatedStorage and then name it as \"packages\"</li> <li>Place the upside engine module in the packages folder</li> </ul> <p>Download</p>"},{"location":"tutorials/plugin-guide/PluginScripts.html#essential-code","title":"Essential code","text":"<p>Place this in StarterPlayerScripts as a local script to make your player move <pre><code>------------- SETTINGS -------------\nlocal sceneName = \"MyScene\" -- Change \"MyScene\" for your scene name\nlocal characterName = \"MyCharacter\" -- Change \"MyCharacter\" for your character name\nlocal isPlatformer = true -- Change this to false if your game is not a platformer\n------------------------------------\nlocal replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal playerGui = game:GetService(\"Players\").LocalPlayer:WaitForChild(\"PlayerGui\")\n\nlocal packages = replicatedStorage:WaitForChild(\"packages\")\nlocal upsideEngine = require(packages:WaitForChild(\"UpsideEngine\"))\n\nlocal sceneManager = upsideEngine.GetService(\"SceneManager\")\nlocal crossPlatformService = upsideEngine.GetService(\"CrossPlatformService\")\nlocal pluginSupportService = upsideEngine.GetService(\"PluginSupportService\")\npluginSupportService:LoadPluginContent()\n\nlocal scene = sceneManager:FindByName(sceneName)\nlocal character = scene.Objects:FindByName(characterName)\n\ncrossPlatformService.SideView = isPlatformer\ncrossPlatformService:SetPlayerCharacter(character)\nscene.Camera:SetSubject(character)\nscene:Enable()\n\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.IgnoreGuiInset = true\nscreenGui.ResetOnSpawn = false\nscreenGui.Parent = playerGui\nscreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global\nscene.Instance.Parent = screenGui\n</code></pre></p>"},{"location":"tutorials/plugin-guide/PluginScripts.html#congratulations-you-are-true-master-of-upside-engine","title":"Congratulations! you are true master of upside engine \ud83c\udf89\ud83c\udf89!!","text":""},{"location":"tutorials/plugin-guide/SpriteEditor.html","title":"Using sprite editor","text":"<p>On this page, you will learn an essential tool to create characters.</p> <p></p>"},{"location":"tutorials/plugin-guide/SpriteEditor.html#introduction-to-sprite-editor","title":"Introduction to Sprite Editor","text":"<p>Click on the Sprite Editor button, and a new window named \"Sprite Editor\" will appear. In this interface, you can easily edit the animations of your character</p> <p></p> <p>Within the Sprite Editor, you'll find some fields:</p> <ul> <li>URL: Input the URL of your spritesheet here.</li> <li>Name: Specify the desired name for your animation in this field.</li> <li>Frames in X Axis: Enter the number of frames along the horizontal axis.</li> <li>Frames in Y Axis: Specify the number of frames along the vertical axis.</li> </ul> <p></p>"},{"location":"tutorials/plugin-guide/SpriteEditor.html#a-basic-usage","title":"A basic usage","text":"Tip <p>If you choose one of the following names from the list when setting your animation name, it will be played automatically with the proper direction (this only works if you use the integrated player movement):</p> <ul> <li>idle_left</li> <li>idle_right</li> <li>idle_up</li> <li>idle_down</li> <li>left</li> <li>right</li> <li>up</li> <li>down</li> </ul> <p>Let's create a basic animation, for this, select an sprite and then click on \"Add Sprite sheet\", in this example we will fill the fields like this:</p> <p></p> <p>In this case we are using this sprite (<code>rbxassetid://12970115106</code>):</p> <p></p> <p>As you can see we have 1 row and 12 columns, thats why we specified 1 in the Y axe and 12 in the X axe. The resolution for every frame in this case is 37x37, so we set the resolution in \"ImageRectSize\" property like this:</p> <p></p> <p>Now we just have to play our animation</p>"},{"location":"tutorials/plugin-guide/SpriteEditor.html#congratulations-you-are-ready-to-edit-any-sprite-lets-move-on-to-the-next-page","title":"Congratulations! you are ready to edit any sprite, let's move on to the next page \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/plugin-guide/TileEditor.html","title":"Using tile editor","text":"<p>On this page, you will learn an essential tool to make scenarios.</p> <p></p>"},{"location":"tutorials/plugin-guide/TileEditor.html#introduction-to-tile-editor","title":"Introduction to Tile Editor","text":"<p>Click on the Tile Editor button, and a new window named \"Tile Editor\" will appear. In this interface, you can easily build a scenario.</p> <p>Within the Tile Editor, you'll find some buttons and fields:</p> <ul> <li>Name: Enter the name of this tile.</li> <li>Image Id: Enter the URL of your tile image here.</li> <li>Size: Specify the dimensions to determine the size of your tile.</li> <li>ZIndex: Assign a numerical value to control whether the tile should appear in front of or behind other tiles.</li> <li>CanCollide: Toggle this option to enable or disable collisions for the tile. This feature can be beneficial, particularly when creating terrains.</li> <li>Crop enabled: Toggle this option to enable or disable the crop.</li> <li>Crop tile: Click here to crop your image, this can be helpful to avoid uploading a lot of images</li> <li>Save tile: Click here to save your tile in the right section</li> </ul> <p></p>"},{"location":"tutorials/plugin-guide/TileEditor.html#cropping-an-image","title":"Cropping an image","text":"<p>When you click on \"Crop tile\", a new window will appear, displaying the image we previously specified in the tile editor in a larger view. You can resize this window to ensure the image is displayed more clearly. </p> <p>When you click on \"Crop tile\", a new window will appear, displaying the image we previously specified in the tile editor in a larger view.</p> <p></p> <p>Once the selection is made, click \"Confirm\" and the crop will be applied to the image.</p> <p></p>"},{"location":"tutorials/plugin-guide/TileEditor.html#a-basic-usage","title":"A basic usage","text":"<p>Let's do a basic configuration, don't forget to enable the \"grid\" and \"place tile\" modes, this will create a new environment called \"Tile Env\".</p> <p></p> <p>Now, Let's build something, Let's hold the left click while we move the mouse</p> <p>You can delete any tile in the same way you place it, just hold Left Ctrl this time</p>"},{"location":"tutorials/plugin-guide/TileEditor.html#congratulations-you-are-ready-to-make-any-scenario-lets-move-on-to-the-next-page","title":"Congratulations! you are ready to make any scenario. Let's move on to the next page \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/shader-guide/BasicEffect.html","title":"Basic effect","text":"<p>On this page, you will explore the fundamentals of how a shader works and discover techniques for creating a variety of interesting effects. By understanding the underlying principles, you'll be able to enhance your projects with visually stunning elements.</p>"},{"location":"tutorials/shader-guide/BasicEffect.html#how-it-works","title":"How it works","text":"<p>When we create a function for our shader, we are creating a function that is executed for each pixel of an image. This function allows us to manipulate various parameters, to achieve the desired visual effects, such as color and position.</p> <p>There are no explicit parameters in the shader functions; instead, upside engine injects variables directly into the function. This approach avoids the need for a lot parameters. You will need to be familiar with the names of these variables, which are both readable and writable.</p>"},{"location":"tutorials/shader-guide/BasicEffect.html#shader-variables","title":"Shader variables","text":"<ul> <li>red  Represents the red intensity of the pixel, with a value ranging from 0 to 255.</li> <li>green  Represents the green intensity of the pixel, with a value ranging from 0 to 255.</li> <li>blue  Represents the blue intensity of the pixel, with a value ranging from 0 to 255.</li> <li>opacity  Represents the opacity of the pixel, with a value ranging from 0 to 255.</li> <li>x  Represents the position of the pixel on the X-axis.</li> <li>y  Represents the position of the pixel on the Y-axis.</li> </ul>"},{"location":"tutorials/shader-guide/BasicEffect.html#inverting-the-color-of-our-image","title":"Inverting the color of our image","text":"<p>If we want to invert the colors of our image, we just need to return to our <code>Shader.luau</code> script and write the following code: <pre><code>return function()\n    red = 255 - red\n    green = 255 - green\n    blue = 255 - blue\nend\n</code></pre></p> <p>Since all values range from 0 to 1, subtracting each color value from 1 inverts the pixel's color for that channel.</p> <p></p>"},{"location":"tutorials/shader-guide/BasicEffect.html#water-shader","title":"Water Shader","text":"<p>Let's take it a step further and create an interesting effect, such as a water effect. We can achieve this using the following code: <pre><code>return function()\n    local clock = os.clock()\n    local speed = 10\n\n    local amplitude = 0.1\n    local waveSize = 1\n\n    x += math.sin(clock * speed + x * amplitude + y * amplitude) * waveSize\n    y += math.cos(clock * speed + x * amplitude + y * amplitude) * waveSize\nend\n</code></pre> <code>clock</code> continuously increases, causing our shader to move constantly. The <code>x</code> and <code>y</code> variables help the shader move diagonally, adding more realism to the effect. If we only used <code>x</code>, the shader would move horizontally, and similarly, if we only used <code>y</code>, it would move vertically.</p> <p><code>math.sin</code> and <code>math.cos</code> are functions that return values ranging from -1 to 1. These functions help create the wave patterns that give the water effect its characteristic movement.</p> <p>As you can see at the bottom of the image, there is a blue gradient that seems unrelated to our image. But why does this happen? When we modify the position of a pixel in our shader, gaps can appear in the image.  Upside Engine automatically fills these gaps in a way that is not noticeable, which results in this effect.</p> <p>Fortunately, there is a property that allows us to fix this issue: <code>Precision</code>. The values for this property should be between 0 and 1. Adjust the value as needed to ensure your shader appears as expected. For example, changing <code>Precision</code> to <code>0.75</code> resolves the problem.</p>"},{"location":"tutorials/shader-guide/BasicEffect.html#good-job-you-finished-the-first-steps-to-create-a-basic-effect-with-a-shader","title":"Good job, you finished the first steps to create a basic effect with a Shader!","text":""},{"location":"tutorials/shader-guide/FirstSteps.html","title":"First Steps","text":"<p>On this page, you will learn how a shader is created and how to assign it to your objects.  To start Let's create a new script <code>guide.client.luau</code> in which we will place this code:</p>"},{"location":"tutorials/shader-guide/FirstSteps.html#a-basic-setup","title":"A basic setup","text":"<p>Let's begin by setting up the essentials. We'll create a scene that will be our main workspace for building and refining our project in this guide. <pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal players = game:GetService(\"Players\")\n\nlocal packages = replicatedStorage.packages\nlocal playerGui = players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal screen = Instance.new(\"ScreenGui\")\nscreen.Name = \"Screen\"\nscreen.IgnoreGuiInset = true\nscreen.Parent = playerGui\n\nlocal scene = upsideEngine.new(\"Scene\")\nscene.Instance.Parent = screen\nscene:SetName(\"MyScene\") \nscene:Enable()\n</code></pre></p>"},{"location":"tutorials/shader-guide/FirstSteps.html#assets","title":"Assets","text":"<p>Roblox only allows you to modify the images uploaded by the owner of the experience, so you will have to download the assets we will work with in this guide.</p> <p> </p>"},{"location":"tutorials/shader-guide/FirstSteps.html#creating-our-shader","title":"Creating our shader","text":"<p>First, we need to create a new Module Script that returns a function. Let's name it <code>Shader.luau</code>.</p> <pre><code>return function()\n    -- shader code\nend\n</code></pre> <p>Now, back in our main script \"guide.client.luau\", let's create the shader:</p> <pre><code>local shader = upsideEngine.new(\"Shader\")\nshader:SetSource(script.Parent.Shader) -- we set the shader source in the module script created previously\n</code></pre> <p>Next, let's create an object to apply our shader to:</p> <pre><code>local water = upsideEngine.new (\"StaticObject\")\nwater:SetScene(scene)\nwater:SetShader(shader)\n\nlocal instance = water.Instance\ninstance.Image = \"rbxassetid://waterId\"\ninstance.Size = UDim2.fromOffset(800, 800)\n</code></pre> <p>Let's add some decoration too: <pre><code>local terrain = upsideEngine.new (\"StaticObject\")\nterrain:SetScene(scene)\n\nlocal instance = terrain.Instance\ninstance.Image = \"rbxassetid://terrainId\"\ninstance.Size = UDim2.fromOffset(800, 800)\n</code></pre></p>"},{"location":"tutorials/shader-guide/FirstSteps.html#good-job-you-finished-the-first-steps-to-create-a-shader","title":"Good job, you finished the first steps to create a shader!","text":""},{"location":"tutorials/shader-guide/IntegratedFunctions.html","title":"Integrated Functions","text":"<p>On the previous page, you saw the variables that are automatically injected by Upside Engine. On this page, you will explore the functions that Upside Engine injects into your shading function, which can help you create interesting effects.</p>"},{"location":"tutorials/shader-guide/IntegratedFunctions.html#shader-functions","title":"Shader Functions","text":""},{"location":"tutorials/shader-guide/IntegratedFunctions.html#r-g-b-a-texturesource-imagelabel-position-vector2","title":"r, g, b, a texture(<code>source: ImageLabel</code>, <code>position: Vector2</code>)","text":"<ul> <li> <p>source  The image from which the specified pixel is read.</p> </li> <li> <p>position  It's the position of the pixel to read.</p> </li> <li> <p>returns  Returns the RGBA values of a pixel at a specified position and returns them as numbers.</p> </li> </ul>"},{"location":"tutorials/shader-guide/IntegratedFunctions.html#x-y-rotatecentre-vector2-position-vector2-degrees-number","title":"x, y rotate(<code>centre: Vector2</code>, <code>position: Vector2</code>, <code>degrees: number</code>)","text":"<ul> <li> <p>centre  The position that will be used as the center when rotating the other pixels.</p> </li> <li> <p>position  The position of the pixel to be rotated.</p> </li> <li> <p>degrees  The number of degrees you want to rotate that pixel.</p> </li> <li> <p>returns  Returns the rotated position of the pixel as numbers.</p> </li> </ul>"},{"location":"tutorials/shader-guide/IntegratedFunctions.html#example","title":"Example","text":"<p>Let's apply the image from a camera to our water texture. Initially, the camera image will appear in the top left corner, but we can adjust its position to a more suitable location. To do this, we will modify its position by subtracting an offset, which is a Vector2 that allows us to move the camera image across the texture.</p> <pre><code>local source = Instance.new(\"ImageLabel\")\nsource.Image = \"rbxassetid://cameraId\"\n\nreturn function()\n    local offset = Vector2.new(60, 80)\n    local position = Vector2.new(x, y)\n    local r, g, b, a = texture(source, position - offset)\n\n    red += r\n    green += g\n    blue += b\n    opacity += a\nend\n</code></pre> <p>As you can see, the camera image appears in the water:</p> <p></p> <p>But it has a bluish tint. This happens because we are blending the water's pixel colors with the camera's. If we want to display the pure camera pixels, we can do the following: <pre><code>local source = Instance.new(\"ImageLabel\")\nsource.Image = \"rbxassetid://cameraId\"\n\nreturn function()\n    local offset = Vector2.new(60, 80)\n    local position = Vector2.new(x, y)\n    local r, g, b, a = texture(source, position - offset)\n\n    if a == 0 then\n        return\n    end \n\n    red = r\n    green = g\n    blue = b\n    opacity = a\nend\n</code></pre> As you can see, now the camera looks normal:</p> <p></p> <p>Perfect, now let's use the <code>rotate</code> function. With this function, we'll rotate the water image around itself. Since the image resolution is 128x128, we'll use the position 64, 64 as the center. Additionally, we'll use <code>clock</code> to make our image rotate continuously, multiplying it by the desired rotational speed.</p> <pre><code>return function()\n    local clock = os.clock()    \n    local speed = 25\n\n    local centre = Vector2.new(64, 64)\n    local position = Vector2.new(x, y)\n\n    x, y = rotate(centre, position, clock * speed)\nend\n</code></pre> <p>final result:</p>"}]}